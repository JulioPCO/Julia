using JuMP, DifferentialEquations, Plots,Ipopt, DiffEqSensitivity

# specify which solver we are using
# declare the JuMP model
m = Model(with_optimizer(Ipopt.Optimizer,warm_start_init_point = "yes") )



h=0.5
nfe=20
nx=3
u=zeros(1,20)


function fODE1(dx, x,u,t)
dx[1]=(1-x[2]^2)x[1]-x[2]+u;
dx[2]=x[1]
dx[3]=x[1]^2+x[2]^2+u
end


x0 = Vector{Float64}(undef,3)
x0=[0.0,1.0,0.0]

uvec=Matrix{Float64}(undef,1,nfe)


mat = Matrix{Float64}(undef,nx,nfe) # states series for plotting


for i in 1:nfe

t=(h*(i-1),h*i)


prob2=ODEProblem(fODE1,x0,t, u[i])
sol = DifferentialEquations.solve(prob2,Tsit5(),reltol=1e-8,abstol=1e-8)
xkk=sol.u[end]



mat[:,i]=xkk

uvec[1,i]=u[i]
x0[:]=xkk

end


plot(mat[1,:],linewidth=5)

plot!(mat[3,:], linewidth=6)
plot!(mat[2,:], linewidth=3)

JuMP.register(m, :F, 3, fODE1, autodiff=true)

@variables(m, begin
    X1[1:20]
	X2[1:20]

end)

for i in 1:nfe
	 set_start_value(X1[i], mat[1,i])
	 set_start_value(X2[i], mat[2,i])

end


@constraints(m, begin
M1,X1[:].>=-0.25
end)

@NLobjective(m,Min,sum(X1[:].^2.0)+sum(X2[:].^2.0)+sum(u.^2.0))

solveNPL=JuMP.optimize!
status = solveNPL(m)

println("Solution:")

println("OF value:", JuMP.objective_value(m))
